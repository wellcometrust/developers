/// <reference types="node" />
import { IncomingMessage } from 'http';
import { NextApiResponse, NextApiRequest } from '../lib/utils';
/**
 * Parse incoming message like `json` or `urlencoded`
 * @param req
 */
export declare function parseBody(req: NextApiRequest, limit?: string): Promise<any>;
/**
 * Parsing query arguments from request `url` string
 * @param url of request
 * @returns Object with key name of query argument and its value
 */
export declare function parseQuery({ url }: IncomingMessage): any;
/**
 *
 * @param res response object
 * @param statusCode `HTTP` status code of response
 */
export declare function sendStatusCode(res: NextApiResponse, statusCode: number): NextApiResponse;
/**
 * Send `any` body to response
 * @param res response object
 * @param body of response
 */
export declare function sendData(res: NextApiResponse, body: any): void;
/**
 * Send `JSON` object
 * @param res response object
 * @param jsonBody of data
 */
export declare function sendJson(res: NextApiResponse, jsonBody: any): void;
/**
 * Custom error class
 */
export declare class ApiError extends Error {
    readonly statusCode: number;
    constructor(statusCode: number, message: string);
}
/**
 * Sends error in `response`
 * @param res response object
 * @param statusCode of response
 * @param message of response
 */
export declare function sendError(res: NextApiResponse, statusCode: number, message: string): void;
