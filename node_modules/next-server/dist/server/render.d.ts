/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { ParsedUrlQuery } from 'querystring';
import React from 'react';
import { DocumentType, AppType, NextPageContext } from '../lib/utils';
import { Manifest as ReactLoadableManifest } from './get-dynamic-import-bundles';
import { BuildManifest } from './get-page-files';
import { IPageConfig } from './load-components';
declare type RenderOpts = {
    autoExport: boolean;
    ampBindInitData: boolean;
    staticMarkup: boolean;
    buildId: string;
    canonicalBase: string;
    dynamicBuildId?: boolean;
    runtimeConfig?: {
        [key: string]: any;
    };
    dangerousAsPath: string;
    assetPrefix?: string;
    err?: Error | null;
    nextExport?: boolean;
    dev?: boolean;
    ampPath?: string;
    amphtml?: boolean;
    hasAmp?: boolean;
    ampMode?: any;
    dataOnly?: boolean;
    buildManifest: BuildManifest;
    reactLoadableManifest: ReactLoadableManifest;
    PageConfig: IPageConfig;
    Component: React.ComponentType;
    Document: DocumentType;
    DocumentMiddleware: (ctx: NextPageContext) => void;
    App: AppType;
    ErrorDebug?: React.ComponentType<{
        error: Error;
    }>;
    ampValidator?: (html: string, pathname: string) => Promise<void>;
};
export declare function renderToHTML(req: IncomingMessage, res: ServerResponse, pathname: string, query: ParsedUrlQuery, renderOpts: RenderOpts): Promise<string | null>;
export {};
